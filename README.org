* ~klin~ - integration of notetaking tools in emacs
This collection of tools is an attempt to create a workflow to /link together all digital and hand-written notes one may have on a topic/. At the same time, it integrates tools to make all linked notes /editable/, even scanned-in handwritten notes (using open-source freehand drawing tools).

It attempts to mimize the effort needed to jump in-between personal notes (org-mode documents) and specific sections of PDF documents (e.g. referenced books and pages therein, or even specific words within pages of pdfs). An alternative would be a browser-based wiki software. The advantage of this software is the integration with emacs and org-mode. 

*** Where does the name come from?
~klin~ is a permutation of the word ~link~. It is supposed to /link/ information together. 

** Installation
~klin~ is built on-top of the following software: 
- [[https://www.gnu.org/software/emacs/][Emacs]] (powerful and configurable text processing environment)
  - [[https://orgmode.org/][Org mode]] (notetaking/GTD system based on plain-text files; this README document was created using org-mode)
  - [[https://github.com/politza/pdf-tools][pdf-tools]] (pdf viewer integrated into emacs)
  - [[https://github.com/jkitchin/org-ref][org-ref]] (provides functions to manage bibliographies, tailored to org-mode)
  - [[https://github.com/weirdNox/org-noter][org-noter]] (package for note-taking by interleaving pdfs with side-by-side viewing of pdf and org-mode notes; basic functionality is taken and modified/expanded upon to interleave different sections of different pdfs in different org-mode headlines and continuously scroll through them, always creating new org-noter sessions, but keeping the cursor in the notes buffer and keeping the notes buffer widened (not narrowed)).
  - [[https://github.com/abo-abo/hydra][Hydra]] (key package for quick summary of and access to useful functions in various contexts of the software; several conditional hydras are implemented in different contexts, all using lisp's /code as data/ capabilities)
- [[https://github.com/xournalpp/xournalpp][Xournalpp]] (freehand pdf annotation software)
Installation: 
#+BEGIN_SRC shell
sudo apt install xournal++
#+END_SRC
- [[https://github.com/clibs/entr][entr]] (monitoring changes of files; here: exporting a pdf automatically after annotation file has changed)
Installation: 
#+BEGIN_SRC shell
sudo apt install entr
#+END_SRC
- [[https://github.com/mozilla/pdf.js][PDF.js]] (pdf viewer with Javascript API, standard in the [[https://www.mozilla.org/de/firefox/new/][Mozilla Firefox]] web-browser)

To take full advantage of ~klin~'s features, one should install the above mentionend packages. 

** Operating systems
~klin~ is primarily built to work on linux, since it relies on the unix shell to address programs outside of emacs. 

** To-Do
- [ ] write function that interactively converts all ~pdfview~ links to ~cite~ links
  - [X] the cite links need a property pdf-page (pp) and doc-page (dp), to avoid errors when converting pdf page numbers to book page numbers. After all, even if a pdf page offset is declared in a pdf's self.bib file, one can never be sure that the printed page numbering is actually consistent. 
  - [ ] to not have the problem of a long inline url in the exported pdf, put the url in a footnote, add the footnote into a citation-style link, i.e. [¹,➚] 
  - [ ] upon conversion from pdfview to cite, a url field for the pdf needs to be added to the bib file (not just to the website hosting the pdf), to be able to instantly open the pdf at the page in the browser
  - [ ] to be able to open a pdf link from within a pdf file, add a little /open in new tab/ icon to the link description upon export
- [X] bookmarklet written to generate correctly formatted org-mode link to pdf with page from Firefox browser (PDF.js, Firefox' default PDF viewer)
- [X] custom org link export to latex for ~cite~ link type

*** Not-To-Do's
Since I realized that ~org-noter~ does not entirely fit my workflow, I don't use it as much any longer. Thus, these functions (which would be great to have) I won't implement any time soon, since other things are more urgent: 
- more optimizations for org-noter
  - [ ] implement /pop-off/ function for org-noter, where a new frame is opened up containing the same frame configuration as the old org-noter frame, but showing the original (base) buffers (pdf window not dedicated, independend searching/scrolling of the pdf and the document windows, but still the ability remains to go back to the old org-noter session instantly, if you launch org-noter from inside the document buffer)
  - [ ] implement function that gathers all org-noter frames, makes them all the same size and puts them one above the other

** Idiosyncracies
*** org-noter
Integrating org-noter subheadings into an org file where you would want to also store other things except annotations is not advised, since the workflow is currently just a bit too messy (however, that might change in the future).
**** line wrapping in org-noter
If an org-noter annotated headline is nested inside another headline, horizontal scrolling is activated when narrowing. With horizontal scrolling, emacs generally truncates lines.
There are two easy options, both of which are not satisfying:
- make it a practice to not nest org-noter headlines inside other headlines
- be content with line truncation
**** automatic rendering of latex fragments in org-noter notes buffers (clones)
Even though a base buffer may have it's latex fragments rendered, that doesn't transfer automatically to a cloned buffer. Once it's cloned, the text is the same, but not the overlay display of latex fragments. Re-rendering these in a cloned buffer (e.g. a narrowed org-noter headline) is a task that has to be done manually. I attempted to implement this, but decided to stop. When launching an org-noter notes buffer, various idle timers are run to make sure the notes buffer and the document buffer stay in sync. The automatic rendering of latex preview fragments (1) could be done as well after a certain idle time, but this did interfere with org-noter's idle timers and produced errors. A second disadvantage is that automatic calls to render latex fragments can be surprising to the user since that task can make emacs stall for a period of time. 

** list of features (list is incomplete)
- [X] quick scanning of handwritten notes and insertion of links into org file:
  - [X] automatically insert scanned-in pdf as a link into org-mode as it arrives in a cloud folder (e.g.: scan pages using a smartphone's camera and dropbox's pdf scanning functionality)
  - [X] in an org-mode buffer, make a function that continuously watches and inserts pdf files arriving in the scanner dump folder (folder fed by actual hardware scanner, over the cloud) and inserts links to these pdfs 
  - [X] collate two scanned pdfs into one: implement a merge function that takes two selected files (within the selected region of the org-mode buffer) and merges (collates pages) them into an output file that is put in the same directory and is linked to by another org-mode link inserted afterwards.
  - [X] implement function that is run on an org-mode link (scanned pdf) and inserts an org-noter headline referring to that link into the org buffer, at the current position.
 
** ideas
- write /clone into neighboring window/ function. 

